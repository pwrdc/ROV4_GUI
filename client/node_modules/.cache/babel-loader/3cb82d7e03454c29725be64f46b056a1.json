{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miko\\u0142aj\\\\OneDrive\\\\Projects\\\\ROV4_GUI\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.sass';\nimport openSocket from 'socket.io-client';\nimport 'noise.js';\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: null\n    };\n  }\n\n  randomRGBValue() {\n    return Math.floor(Math.random() * 256);\n  }\n\n  randomRGBImageArray(width, height) {\n    let rgbdata = []; // for(let i=0; i<width; i++){\n    //   let row = [];\n    //   for(let j=0; j<height; j++){\n    //     row.push([\n    //       this.randomRGBValue(),\n    //       this.randomRGBValue(),\n    //       this.randomRGBValue()\n    //     ]);\n    //   }\n    //   rgbdata.push(row);\n    // }\n\n    noise.seed(Math.random());\n\n    for (var x = 0; x < canvas.width; x++) {\n      for (var y = 0; y < canvas.height; y++) {\n        // All noise functions return values in the range of -1 to 1.\n        // noise.simplex2 and noise.perlin2 for 2d noise\n        var value = noise.simplex2(x / 100, y / 100); // ... or noise.simplex3 and noise.perlin3:\n\n        var value = noise.simplex3(x / 100, y / 100, time);\n        image[x][y].r = Math.abs(value) * 256; // Or whatever. Open demo.html to see it used with canvas.\n      }\n    }\n\n    console.log(rgbdata);\n    return rgbdata;\n  }\n\n  renderImg(rgbdata) {\n    // convert rgbdata from server, paint it on a canvas and render it on the page\n    const canvas = this.refs.canvas;\n    let ctx = canvas.getContext('2d');\n\n    for (let i = 0; i < rgbdata.length; i++) {\n      for (let j = 0; j < rgbdata[0].length; j++) {\n        ctx.fillStyle = 'rgba(' + rgbdata[i][j][0] + ',' + rgbdata[i][j][1] + ',' + rgbdata[i][j][2] + ', 1)';\n        ctx.fillRect(i, j, 1, 1);\n      }\n    }\n\n    console.log(canvas);\n    this.setState({\n      img: canvas // set image state which will render it\n\n    });\n  }\n\n  componentWillMount() {\n    // get rgbdata from server\n    fetch('klateczka.txt').then(response => response.text()).then(data => {\n      console.log(data[0]);\n      setInterval(() => {\n        this.renderImg(this.randomRGBImageArray(200, 100));\n      }, 100);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: \"200\",\n      height: \"300\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // ========================================\n// const io = openSocket('http://localhost:3000');\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Camera, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 3\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Miko≈Çaj/OneDrive/Projects/ROV4_GUI/client/src/index.js"],"names":["React","ReactDOM","openSocket","Camera","Component","constructor","props","state","img","randomRGBValue","Math","floor","random","randomRGBImageArray","width","height","rgbdata","noise","seed","x","canvas","y","value","simplex2","simplex3","time","image","r","abs","console","log","renderImg","refs","ctx","getContext","i","length","j","fillStyle","fillRect","setState","componentWillMount","fetch","then","response","text","data","setInterval","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.sass';\r\nimport openSocket from 'socket.io-client';\r\nimport 'noise.js';\r\n\r\n\r\nclass Camera extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: null\r\n    }\r\n  }\r\n\r\n  randomRGBValue() {\r\n    return Math.floor(Math.random() * 256);\r\n  }\r\n\r\n  randomRGBImageArray(width, height) {\r\n    let rgbdata = [];\r\n\r\n    // for(let i=0; i<width; i++){\r\n    //   let row = [];\r\n    //   for(let j=0; j<height; j++){\r\n    //     row.push([\r\n    //       this.randomRGBValue(),\r\n    //       this.randomRGBValue(),\r\n    //       this.randomRGBValue()\r\n    //     ]);\r\n    //   }\r\n    //   rgbdata.push(row);\r\n    // }\r\n\r\n    noise.seed(Math.random());\r\n    for (var x = 0; x < canvas.width; x++) {\r\n      for (var y = 0; y < canvas.height; y++) {\r\n        // All noise functions return values in the range of -1 to 1.\r\n\r\n        // noise.simplex2 and noise.perlin2 for 2d noise\r\n        var value = noise.simplex2(x / 100, y / 100);\r\n        // ... or noise.simplex3 and noise.perlin3:\r\n        var value = noise.simplex3(x / 100, y / 100, time);\r\n\r\n        image[x][y].r = Math.abs(value) * 256; // Or whatever. Open demo.html to see it used with canvas.\r\n      }\r\n    }\r\n    console.log(rgbdata);\r\n    return rgbdata;\r\n  }\r\n\r\n  renderImg(rgbdata) {\r\n    // convert rgbdata from server, paint it on a canvas and render it on the page\r\n    const canvas = this.refs.canvas;\r\n    let ctx = canvas.getContext('2d');\r\n\r\n    for(let i=0; i<rgbdata.length; i++){\r\n      for(let j=0; j<rgbdata[0].length; j++){\t\r\n        ctx.fillStyle = 'rgba('+\r\n          rgbdata[i][j][0]+','+\r\n          rgbdata[i][j][1]+','+\r\n          rgbdata[i][j][2]+', 1)'; \r\n        ctx.fillRect(i,j,1,1);\r\n      }\r\n    }\r\n\r\n    console.log(canvas);\r\n\r\n    this.setState({\r\n      img: canvas // set image state which will render it\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    // get rgbdata from server\r\n    fetch('klateczka.txt')\r\n    .then(response => response.text())\r\n    .then(data => {\r\n      console.log(data[0]);\r\n      setInterval(() => {\r\n        this.renderImg(\r\n          this.randomRGBImageArray(200,100)\r\n        );\r\n      },100);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <img src={ this.state.img } alt=\"ROV camera output\"/> */}\r\n        {/* <canvas width=\"200\" height=\"100\"></canvas> */}\r\n        <canvas ref='canvas' width='200' height='300'></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\n// const io = openSocket('http://localhost:3000');\r\n\r\nReactDOM.render(\r\n  <Camera />,\r\n  document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}