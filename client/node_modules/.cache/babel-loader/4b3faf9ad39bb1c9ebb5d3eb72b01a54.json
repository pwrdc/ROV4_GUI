{"ast":null,"code":"var emulated = {\n  'datetime.datetime': function (args) {\n    var tmp = new Buffer(args[0], 'binary'),\n        year = tmp.readUInt16BE(0),\n        month = tmp.readUInt8(2) - 1,\n        day = tmp.readUInt8(3),\n        hour = tmp.readUInt8(4),\n        minute = tmp.readUInt8(5),\n        second = tmp.readUInt8(6),\n        microsecond = tmp.readUInt32BE(6) & 0xffffff;\n\n    if (args[1] == 'UTC') {\n      return new Date(Date.UTC(year, month, day, hour, minute, second, microsecond / 1000));\n    } else {\n      return new Date(year, month, day, hour, minute, second, microsecond / 1000);\n    }\n  },\n  'django.utils.timezone.UTC': function (args) {\n    return 'UTC';\n  }\n};\n\nvar Parser = function () {\n  this.mark = 'THIS-NEEDS-TO-BE-UNIQUE-TO-SERVE-AS-A-BOUNDARY';\n  this.memo = {};\n  this.stack = [];\n};\n\nParser.prototype.load = function (pickle) {\n  var MARK = '(' // push special markobject on stack\n  ,\n      STOP = '.' // every pickle ends with STOP\n  ,\n      POP = '0' // discard topmost stack item\n  ,\n      POP_MARK = '1' // discard stack top through topmost markobject\n  ,\n      DUP = '2' // duplicate top stack item\n  ,\n      FLOAT = 'F' // push float object; decimal string argument\n  ,\n      INT = 'I' // push integer or bool; decimal string argument\n  ,\n      BININT = 'J' // push 4-byte signed int\n  ,\n      BININT1 = 'K' // push 1-byte unsigned int\n  ,\n      LONG = 'L' // push long; decimal string argument\n  ,\n      BININT2 = 'M' // push 2-byte unsigned int\n  ,\n      NONE = 'N' // push None\n  // missing PERSID\n  // missing BINPERSID\n  ,\n      REDUCE = 'R' // apply callable to argtuple, both on stack\n  ,\n      STRING = 'S' // push string; NL-terminated string argument\n  ,\n      BINSTRING = 'T' // push string; counted binary string argument\n  ,\n      SHORT_BINSTRING = 'U' //  \"     \"   ;    \"      \"       \"      \" < 256 bytes\n  ,\n      UNICODE = 'V' // push Unicode string; raw-unicode-escaped'd argument\n  ,\n      BINUNICODE = 'X' //   \"     \"       \"  ; counted UTF-8 string argument\n  ,\n      APPEND = 'a' // append stack top to list below it\n  ,\n      BUILD = 'b' // build the entire value\n  ,\n      GLOBAL = 'c' // push self.find_class(modname, name); 2 string args\n  ,\n      DICT = 'd' // build a dict from stack items\n  ,\n      EMPTY_DICT = '}' // push empty dict\n  ,\n      APPENDS = 'e' // extend list on stack by topmost stack slice\n  ,\n      GET = 'g' // push item from memo on stack; index is string arg\n  ,\n      BINGET = 'h' //   \"    \"    \"    \"   \"   \"  ;   \"    \" 1-byte arg\n  // missing INST\n  ,\n      LONG_BINGET = 'j' // push item from memo on stack; index is 4-byte arg\n  ,\n      LIST = 'l' // build list from topmost stack items\n  ,\n      EMPTY_LIST = ']' // push empty list\n  ,\n      OBJ = 'o' // build a class instance using the objects between here and the mark\n  ,\n      PUT = 'p' // store stack top in memo; index is string arg\n  ,\n      BINPUT = 'q' //   \"     \"    \"   \"   \" ;   \"    \" 1-byte arg\n  ,\n      LONG_BINPUT = 'r' //   \"     \"    \"   \"   \" ;   \"    \" 4-byte arg\n  ,\n      SETITEM = 's' // add key+value pair to dict\n  ,\n      TUPLE = 't' // build tuple from topmost stack items\n  ,\n      EMPTY_TUPLE = ')' // push empty tuple\n  ,\n      SETITEMS = 'u' // modify dict by adding topmost key+value pairs\n  ,\n      BINFLOAT = 'G' // push float; arg is 8-byte float encoding\n  // protocol 2\n  ,\n      PROTO = '\\x80' // identify pickle protocol\n  ,\n      NEWOBJ = '\\x81' // build object by applying cls.__new__ to argtuple\n  ,\n      TUPLE1 = '\\x85' // build 1-tuple from stack top\n  ,\n      TUPLE2 = '\\x86' // build 2-tuple from two topmost stack items\n  ,\n      TUPLE3 = '\\x87' // build 3-tuple from three topmost stack items\n  ,\n      NEWTRUE = '\\x88' // push True\n  ,\n      NEWFALSE = '\\x89' // push False\n  ,\n      LONG1 = '\\x8a' // push long from < 256 bytes\n  ,\n      LONG4 = '\\x8b' // push really big long\n  ;\n  var buffer = new Buffer(pickle, 'binary');\n\n  buffer.readLine = function (i) {\n    var index = pickle.indexOf('\\n', i);\n    if (index == -1) throw \"Could not find end of line\";\n    return pickle.substr(i, index - i);\n  };\n\n  for (var i = 0; i < pickle.length;) {\n    var opindex = i,\n        opcode = pickle[i++]; //console.log('opcode ' + opindex + ' ' + opcode);\n\n    switch (opcode) {\n      // protocol 2\n      case PROTO:\n        var proto = buffer.readUInt8(i++);\n        if (proto != 2) throw 'Unhandled pickle protocol version: ' + proto;\n        break;\n\n      case TUPLE1:\n        var a = this.stack.pop();\n        this.stack.push([a]);\n        break;\n\n      case TUPLE2:\n        var b = this.stack.pop(),\n            a = this.stack.pop();\n        this.stack.push([a, b]);\n        break;\n\n      case TUPLE3:\n        var c = this.stack.pop(),\n            b = this.stack.pop(),\n            a = this.stack.pop();\n        this.stack.push([a, b, c]);\n        break;\n\n      case NEWTRUE:\n        this.stack.push(true);\n        break;\n\n      case NEWFALSE:\n        this.stack.push(false);\n        break;\n\n      case LONG1:\n        var length = buffer.readUInt8(i++); // FIXME: actually decode LONG1\n\n        i += length;\n        this.stack.push(0);\n        break;\n\n      case LONG4:\n        var length = buffer.readUInt32LE(i);\n        i += 4; // FIXME: actually decode LONG4\n\n        i += length;\n        this.stack.push(0);\n        break;\n      // protocol 0 and protocol 1\n\n      case POP:\n        this.stack.pop();\n        break;\n\n      case POP_MARK:\n        var mark = this.marker();\n        this.stack = this.stack.slice(0, mark);\n        break;\n\n      case DUP:\n        var value = this.stack[this.stack.length - 1];\n        this.stack.push(value);\n        break;\n\n      case EMPTY_DICT:\n        this.stack.push({});\n        break;\n\n      case EMPTY_LIST:\n      case EMPTY_TUPLE:\n        this.stack.push([]);\n        break;\n\n      case GET:\n        var index = buffer.readLine(i);\n        i += index.length + 1;\n        this.stack.push(this.memo[index]);\n        break;\n\n      case BINGET:\n        var index = buffer.readUInt8(i++);\n        this.stack.push(this.memo['' + index]);\n        break;\n\n      case LONG_BINGET:\n        var index = buffer.readUInt32LE(i);\n        i += 4;\n        this.stack.push(this.memo['' + index]);\n        break;\n\n      case PUT:\n        var index = buffer.readLine(i);\n        i += index.length + 1;\n        this.memo[index] = this.stack[this.stack.length - 1];\n        break;\n\n      case BINPUT:\n        var index = buffer.readUInt8(i++);\n        this.memo['' + index] = this.stack[this.stack.length - 1];\n        break;\n\n      case LONG_BINPUT:\n        var index = buffer.readUInt32LE(i);\n        i += 4;\n        this.memo['' + index] = this.stack[this.stack.length - 1];\n        break;\n\n      case GLOBAL:\n        var module = buffer.readLine(i);\n        i += module.length + 1;\n        var name = buffer.readLine(i);\n        i += name.length + 1;\n        var func = emulated[module + '.' + name];\n\n        if (func === undefined) {\n          throw \"Cannot emulate global: \" + module + \" \" + name;\n        }\n\n        this.stack.push(func);\n        break;\n\n      case OBJ:\n        var obj = new (this.stack.pop())();\n        var mark = this.marker();\n\n        for (var pos = mark + 1; pos < this.stack.length; pos += 2) {\n          obj[this.stack[pos]] = this.stack[pos + 1];\n        }\n\n        this.stack = this.stack.slice(0, mark);\n        this.stack.push(obj);\n        break;\n\n      case BUILD:\n        var dict = this.stack.pop();\n        var obj = this.stack.pop();\n\n        for (var p in dict) {\n          obj[p] = dict[p];\n        }\n\n        this.stack.push(obj);\n        break;\n\n      case REDUCE:\n        var args = this.stack.pop();\n        var func = this.stack[this.stack.length - 1];\n        this.stack[this.stack.length - 1] = func(args);\n        break;\n\n      case INT:\n        var value = buffer.readLine(i);\n        i += value.length + 1;\n        if (value == '01') this.stack.push(true);else if (value == '00') this.stack.push(false);else this.stack.push(parseInt(value));\n        break;\n\n      case BININT:\n        this.stack.push(buffer.readInt32LE(i));\n        i += 4;\n        break;\n\n      case BININT1:\n        this.stack.push(buffer.readUInt8(i));\n        i += 1;\n        break;\n\n      case BININT2:\n        this.stack.push(buffer.readUInt16LE(i));\n        i += 2;\n        break;\n\n      case MARK:\n        this.stack.push(this.mark);\n        break;\n\n      case FLOAT:\n        var value = buffer.readLine(i);\n        i += value.length + 1;\n        this.stack.push(parseFloat(value));\n        break;\n\n      case LONG:\n        var value = buffer.readLine(i);\n        i += value.length + 1;\n        this.stack.push(parseInt(value));\n        break;\n\n      case BINFLOAT:\n        this.stack.push(buffer.readDoubleBE(i));\n        i += 8;\n        break;\n\n      case STRING:\n        var value = buffer.readLine(i);\n        i += value.length + 1;\n        var quotes = \"\\\"'\";\n\n        if (value[0] == \"'\") {\n          if (value[value.length - 1] != \"'\") throw \"insecure string pickle\";\n        } else if (value[0] = '\"') {\n          if (value[value.length - 1] != '\"') throw \"insecure string pickle\";\n        } else {\n          throw \"insecure string pickle\";\n        }\n\n        this.stack.push(value.substr(1, value.length - 2));\n        break;\n\n      case UNICODE:\n        var value = buffer.readLine(i);\n        i += value.length + 1;\n        this.stack.push(value);\n        break;\n\n      case BINSTRING:\n        var length = buffer.readUInt32LE(i);\n        i += 4;\n        this.stack.push(buffer.toString('binary', i, i + length));\n        i += length;\n        break;\n\n      case SHORT_BINSTRING:\n        var length = buffer.readUInt8(i++);\n        this.stack.push(buffer.toString('binary', i, i + length));\n        i += length;\n        break;\n\n      case BINUNICODE:\n        var length = buffer.readUInt32LE(i);\n        i += 4;\n        this.stack.push(buffer.toString('utf8', i, i + length));\n        i += length;\n        break;\n\n      case APPEND:\n        var value = this.stack.pop();\n        this.stack[this.stack.length - 1].push(value);\n        break;\n\n      case APPENDS:\n        var mark = this.marker(),\n            list = this.stack[mark - 1];\n        list.push.apply(list, this.stack.slice(mark + 1));\n        this.stack = this.stack.slice(0, mark);\n        break;\n\n      case SETITEM:\n        var value = this.stack.pop(),\n            key = this.stack.pop();\n        this.stack[this.stack.length - 1][key] = value;\n        break;\n\n      case SETITEMS:\n        var mark = this.marker(),\n            obj = this.stack[mark - 1];\n\n        for (var pos = mark + 1; pos < this.stack.length; pos += 2) {\n          obj[this.stack[pos]] = this.stack[pos + 1];\n        }\n\n        this.stack = this.stack.slice(0, mark);\n        break;\n\n      case LIST:\n      case TUPLE:\n        var mark = this.marker(),\n            list = this.stack.slice(mark + 1);\n        this.stack = this.stack.slice(0, mark);\n        this.stack.push(list);\n        break;\n\n      case DICT:\n        var mark = this.marker();\n        obj = {};\n\n        for (var pos = mark + 1; pos < this.stack.length; pos += 2) {\n          obj[this.stack[pos]] = this.stack[pos + 1];\n        }\n\n        this.stack = this.stack.slice(0, mark);\n        this.stack.push(obj);\n        break;\n\n      case STOP:\n        return this.stack.pop();\n\n      case NONE:\n        this.stack.push(null);\n        break;\n\n      default:\n        throw \"Unhandled opcode '\" + opcode + \"'\";\n    }\n  }\n};\n\nParser.prototype.marker = function (parser) {\n  var k = this.stack.length - 1;\n\n  while (k > 0 && this.stack[k] !== this.mark) {\n    --k;\n  }\n\n  return k;\n};\n\nmodule.exports.emulated = emulated;\n\nmodule.exports.loads = function (data) {\n  var parser = new Parser();\n  return parser.load(data);\n};","map":{"version":3,"sources":["C:/Users/Mikołaj/OneDrive/Projects/ROV4_GUI/client/node_modules/jpickle/lib/jpickle.js"],"names":["emulated","args","tmp","Buffer","year","readUInt16BE","month","readUInt8","day","hour","minute","second","microsecond","readUInt32BE","Date","UTC","Parser","mark","memo","stack","prototype","load","pickle","MARK","STOP","POP","POP_MARK","DUP","FLOAT","INT","BININT","BININT1","LONG","BININT2","NONE","REDUCE","STRING","BINSTRING","SHORT_BINSTRING","UNICODE","BINUNICODE","APPEND","BUILD","GLOBAL","DICT","EMPTY_DICT","APPENDS","GET","BINGET","LONG_BINGET","LIST","EMPTY_LIST","OBJ","PUT","BINPUT","LONG_BINPUT","SETITEM","TUPLE","EMPTY_TUPLE","SETITEMS","BINFLOAT","PROTO","NEWOBJ","TUPLE1","TUPLE2","TUPLE3","NEWTRUE","NEWFALSE","LONG1","LONG4","buffer","readLine","i","index","indexOf","substr","length","opindex","opcode","proto","a","pop","push","b","c","readUInt32LE","marker","slice","value","module","name","func","undefined","obj","pos","dict","p","parseInt","readInt32LE","readUInt16LE","parseFloat","readDoubleBE","quotes","toString","list","apply","key","parser","k","exports","loads","data"],"mappings":"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","sourcesContent":["var emulated = {\n    'datetime.datetime': function(args) {\n        var tmp = new Buffer(args[0], 'binary')\n          , year = tmp.readUInt16BE(0)\n          , month = tmp.readUInt8(2) - 1\n          , day = tmp.readUInt8(3)\n          , hour = tmp.readUInt8(4)\n          , minute = tmp.readUInt8(5)\n          , second = tmp.readUInt8(6)\n          , microsecond = tmp.readUInt32BE(6) & 0xffffff;\n        if (args[1] == 'UTC') {\n            return new Date(Date.UTC(year, month, day, hour, minute, second, microsecond / 1000));\n        } else {\n            return new Date(year, month, day, hour, minute, second, microsecond / 1000);\n        }\n    },\n    'django.utils.timezone.UTC': function(args) {\n        return 'UTC';\n    }\n};\n\nvar Parser = function() {\n    this.mark = 'THIS-NEEDS-TO-BE-UNIQUE-TO-SERVE-AS-A-BOUNDARY';\n    this.memo = {};\n    this.stack = [];\n};\n\nParser.prototype.load = function(pickle) {\n    var MARK = '('              // push special markobject on stack\n      , STOP = '.'              // every pickle ends with STOP\n      , POP = '0'               // discard topmost stack item\n      , POP_MARK = '1'          // discard stack top through topmost markobject\n      , DUP = '2'               // duplicate top stack item\n      , FLOAT = 'F'             // push float object; decimal string argument\n      , INT = 'I'               // push integer or bool; decimal string argument\n      , BININT = 'J'            // push 4-byte signed int\n      , BININT1 = 'K'           // push 1-byte unsigned int\n      , LONG = 'L'              // push long; decimal string argument\n      , BININT2 = 'M'           // push 2-byte unsigned int\n      , NONE = 'N'              // push None\n      // missing PERSID\n      // missing BINPERSID\n      , REDUCE = 'R'            // apply callable to argtuple, both on stack\n      , STRING = 'S'            // push string; NL-terminated string argument\n      , BINSTRING = 'T'         // push string; counted binary string argument\n      , SHORT_BINSTRING = 'U'   //  \"     \"   ;    \"      \"       \"      \" < 256 bytes\n      , UNICODE = 'V'           // push Unicode string; raw-unicode-escaped'd argument\n      , BINUNICODE = 'X'        //   \"     \"       \"  ; counted UTF-8 string argument\n      , APPEND = 'a'            // append stack top to list below it\n      , BUILD = 'b'             // build the entire value\n      , GLOBAL = 'c'            // push self.find_class(modname, name); 2 string args\n      , DICT = 'd'              // build a dict from stack items\n      , EMPTY_DICT = '}'        // push empty dict\n      , APPENDS = 'e'           // extend list on stack by topmost stack slice\n      , GET = 'g'               // push item from memo on stack; index is string arg\n      , BINGET = 'h'            //   \"    \"    \"    \"   \"   \"  ;   \"    \" 1-byte arg\n      // missing INST\n      , LONG_BINGET = 'j'       // push item from memo on stack; index is 4-byte arg\n      , LIST = 'l'              // build list from topmost stack items\n      , EMPTY_LIST = ']'        // push empty list\n      , OBJ = 'o'               // build a class instance using the objects between here and the mark\n      , PUT = 'p'               // store stack top in memo; index is string arg\n      , BINPUT = 'q'            //   \"     \"    \"   \"   \" ;   \"    \" 1-byte arg\n      , LONG_BINPUT = 'r'       //   \"     \"    \"   \"   \" ;   \"    \" 4-byte arg\n      , SETITEM = 's'           // add key+value pair to dict\n      , TUPLE = 't'             // build tuple from topmost stack items\n      , EMPTY_TUPLE = ')'       // push empty tuple\n      , SETITEMS = 'u'          // modify dict by adding topmost key+value pairs\n      , BINFLOAT = 'G'          // push float; arg is 8-byte float encoding\n      // protocol 2\n      , PROTO = '\\x80'          // identify pickle protocol\n      , NEWOBJ = '\\x81'         // build object by applying cls.__new__ to argtuple\n      , TUPLE1 = '\\x85'         // build 1-tuple from stack top\n      , TUPLE2 = '\\x86'         // build 2-tuple from two topmost stack items\n      , TUPLE3 = '\\x87'         // build 3-tuple from three topmost stack items\n      , NEWTRUE = '\\x88'        // push True\n      , NEWFALSE = '\\x89'       // push False\n      , LONG1 = '\\x8a'          // push long from < 256 bytes\n      , LONG4 = '\\x8b'          // push really big long\n      ;\n\n    var buffer = new Buffer(pickle, 'binary');\n    buffer.readLine = function(i) {\n        var index = pickle.indexOf('\\n', i);\n        if (index == -1)\n            throw \"Could not find end of line\";\n        return pickle.substr(i, index - i);\n    }\n\n    for (var i = 0; i < pickle.length; ) {\n        var opindex = i\n          , opcode = pickle[i++];\n        //console.log('opcode ' + opindex + ' ' + opcode);\n        switch (opcode) {\n        // protocol 2\n        case PROTO:\n            var proto = buffer.readUInt8(i++);\n            if (proto != 2)\n                throw 'Unhandled pickle protocol version: ' + proto;\n            break;\n        case TUPLE1:\n            var a = this.stack.pop();\n            this.stack.push([a]);\n            break;\n        case TUPLE2:\n            var b = this.stack.pop()\n              , a = this.stack.pop();\n            this.stack.push([a, b]);\n            break;\n        case TUPLE3:\n            var c = this.stack.pop()\n              , b = this.stack.pop()\n              , a = this.stack.pop();\n            this.stack.push([a, b, c]);\n            break;\n        case NEWTRUE:\n            this.stack.push(true);\n            break;\n        case NEWFALSE:\n            this.stack.push(false);\n            break;\n        case LONG1:\n            var length = buffer.readUInt8(i++);\n            // FIXME: actually decode LONG1\n            i += length;\n            this.stack.push(0);\n            break;\n        case LONG4:\n            var length = buffer.readUInt32LE(i);\n            i += 4;\n            // FIXME: actually decode LONG4\n            i += length;\n            this.stack.push(0);\n            break;\n        // protocol 0 and protocol 1\n        case POP:\n            this.stack.pop();\n            break;\n        case POP_MARK:\n            var mark = this.marker();\n            this.stack = this.stack.slice(0, mark);\n            break;\n        case DUP:\n            var value = this.stack[this.stack.length-1];\n            this.stack.push(value);\n            break;\n        case EMPTY_DICT:\n            this.stack.push({});\n            break;\n        case EMPTY_LIST:\n        case EMPTY_TUPLE:\n            this.stack.push([]);\n            break;\n        case GET:\n            var index = buffer.readLine(i);\n            i += index.length + 1;\n            this.stack.push(this.memo[index]);\n            break;\n        case BINGET:\n            var index = buffer.readUInt8(i++);\n            this.stack.push(this.memo[''+index]);\n            break;\n        case LONG_BINGET:\n            var index = buffer.readUInt32LE(i);\n            i+=4;\n            this.stack.push(this.memo[''+index]);\n            break;\n        case PUT:\n            var index = buffer.readLine(i);\n            i += index.length + 1;\n            this.memo[index] = this.stack[this.stack.length-1];\n            break;\n        case BINPUT:\n            var index = buffer.readUInt8(i++);\n            this.memo['' + index] = this.stack[this.stack.length-1];\n            break;\n        case LONG_BINPUT:\n            var index = buffer.readUInt32LE(i);\n            i+=4;\n            this.memo['' + index] = this.stack[this.stack.length-1];\n            break;\n        case GLOBAL:\n            var module = buffer.readLine(i);\n            i += module.length + 1;\n            var name = buffer.readLine(i);\n            i += name.length + 1;\n            var func = emulated[module + '.' + name];\n            if (func === undefined) {\n                throw \"Cannot emulate global: \" + module + \" \" + name;\n            }\n            this.stack.push(func);\n            break;\n        case OBJ:\n            var obj = new (this.stack.pop())();\n            var mark = this.marker();\n            for (var pos = mark + 1; pos < this.stack.length; pos += 2) {\n              obj[this.stack[pos]] = this.stack[pos + 1];\n            }\n            this.stack = this.stack.slice(0, mark);\n            this.stack.push(obj);\n            break;\n        case BUILD:\n            var dict = this.stack.pop();\n            var obj = this.stack.pop();\n            for ( var p in dict ) {\n              obj[p] = dict[p];\n            }\n            this.stack.push(obj);\n            break;\n        case REDUCE:\n            var args = this.stack.pop();\n            var func = this.stack[this.stack.length - 1];\n            this.stack[this.stack.length - 1] = func(args);\n            break;\n        case INT:\n            var value = buffer.readLine(i);\n            i += value.length + 1;\n            if (value == '01')\n                this.stack.push(true);\n            else if (value == '00')\n                this.stack.push(false);\n            else\n                this.stack.push(parseInt(value));\n            break;\n        case BININT:\n            this.stack.push(buffer.readInt32LE(i));\n            i += 4;\n            break;\n        case BININT1:\n            this.stack.push(buffer.readUInt8(i));\n            i += 1;\n            break;\n        case BININT2:\n            this.stack.push(buffer.readUInt16LE(i));\n            i += 2;\n            break;\n        case MARK:\n            this.stack.push(this.mark);\n            break;\n        case FLOAT:\n            var value = buffer.readLine(i);\n            i += value.length + 1;\n            this.stack.push(parseFloat(value));\n            break;\n        case LONG:\n            var value = buffer.readLine(i);\n            i += value.length + 1;\n            this.stack.push(parseInt(value));\n            break;\n        case BINFLOAT:\n            this.stack.push(buffer.readDoubleBE(i));\n            i += 8;\n            break;\n        case STRING:\n            var value = buffer.readLine(i);\n            i += value.length + 1;\n            var quotes = \"\\\"'\";\n            if (value[0] == \"'\") {\n                if (value[value.length-1] != \"'\")\n                    throw \"insecure string pickle\";\n            } else if (value[0] = '\"') {\n                if (value[value.length-1] != '\"')\n                    throw \"insecure string pickle\";\n            } else {\n                throw \"insecure string pickle\";\n            }\n            this.stack.push(value.substr(1, value.length-2));\n            break;\n        case UNICODE:\n            var value = buffer.readLine(i);\n            i += value.length + 1;\n            this.stack.push(value);\n            break;\n        case BINSTRING:\n            var length = buffer.readUInt32LE(i);\n            i += 4;\n            this.stack.push(buffer.toString('binary', i, i + length));\n            i += length;\n            break;\n        case SHORT_BINSTRING:\n            var length = buffer.readUInt8(i++);\n            this.stack.push(buffer.toString('binary', i, i + length));\n            i += length;\n            break;\n        case BINUNICODE:\n            var length = buffer.readUInt32LE(i);\n            i += 4;\n            this.stack.push(buffer.toString('utf8', i, i + length));\n            i += length;\n            break;\n        case APPEND:\n            var value = this.stack.pop();\n            this.stack[this.stack.length-1].push(value);\n            break;\n        case APPENDS:\n            var mark = this.marker(),\n                list = this.stack[mark - 1];\n            list.push.apply(list, this.stack.slice(mark + 1));\n            this.stack = this.stack.slice(0, mark);\n            break;\n        case SETITEM:\n            var value = this.stack.pop()\n              , key = this.stack.pop();\n            this.stack[this.stack.length-1][key] = value;\n            break;\n        case SETITEMS:\n            var mark = this.marker()\n              , obj = this.stack[mark - 1];\n            for (var pos = mark + 1; pos < this.stack.length; pos += 2) {\n                obj[this.stack[pos]] = this.stack[pos + 1];\n            }\n            this.stack = this.stack.slice(0, mark);\n            break;\n        case LIST:\n        case TUPLE:\n            var mark = this.marker()\n              , list = this.stack.slice(mark + 1);\n            this.stack = this.stack.slice(0, mark);\n            this.stack.push(list);\n            break;\n        case DICT:\n            var mark = this.marker()\n                obj = {};\n            for (var pos = mark + 1; pos < this.stack.length; pos += 2) {\n                obj[this.stack[pos]] = this.stack[pos + 1];\n            }\n            this.stack = this.stack.slice(0, mark);\n            this.stack.push(obj);\n            break;\n        case STOP:\n            return this.stack.pop();\n        case NONE:\n            this.stack.push(null);\n            break;\n        default:\n            throw \"Unhandled opcode '\" + opcode + \"'\";\n        }\n    }\n};\n\nParser.prototype.marker = function(parser) {\n    var k = this.stack.length - 1\n    while (k > 0 && this.stack[k] !== this.mark) {\n        --k;\n    }\n    return k;\n};\n\nmodule.exports.emulated = emulated;\nmodule.exports.loads = function(data) {\n    var parser = new Parser();\n    return parser.load(data);\n};\n"]},"metadata":{},"sourceType":"script"}