{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miko\\u0142aj\\\\OneDrive\\\\Projects\\\\ROV4_GUI\\\\client\\\\src\\\\components\\\\Camera.js\";\nimport React from 'react';\nimport openSocket from 'socket.io-client';\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: null\n    };\n  } // getRandomRGBValue(min=0, max=255) {\n  //   return Math.floor(Math.random() * max) + min;\n  // }\n  // getRandomRGBImgArray(width, height) {\n  //   let rgbdata = [];\n  //   for(let i = 0; i < width; i++){\n  //     let row = [];\n  //     for(let j = 0; j < height; j++){\n  //       row.push([\n  //         this.getRandomRGBValue(0,255),\n  //         this.getRandomRGBValue(0,255),\n  //         this.getRandomRGBValue(0,255)\n  //       ]);\n  //     }\n  //     rgbdata.push(row);\n  //   }\n  //   return rgbdata;\n  // }\n  // renderRandomRGBImg(rgbarray) {\n  //   // paint rgbadata array on a canvas\n  //   const canvas = this.refs.canvas;\n  //   let ctx = canvas.getContext('2d');\n  //   for(let i = 0; i < rgbarray.length; i++){\n  //     for(let j = 0; j < rgbarray[0].length; j++){\t\n  //       ctx.fillStyle = 'rgba('+\n  //         rgbarray[i][j][0]+','+\n  //         rgbarray[i][j][1]+','+\n  //         rgbarray[i][j][2]+', 1)'; \n  //       ctx.fillRect(i,j,1,1);\n  //     }\n  //   }\n  // }\n\n\n  renderImg(data) {\n    let src = 'data:image/jpg;base64, ' + data;\n    this.setState({\n      img: src // set image state which will render it\n\n    });\n  }\n\n  componentDidMount() {\n    const io = openSocket('http://localhost:5000');\n    io.on('frame', data => {\n      this.renderImg(data);\n    }); // // get rgbdata from server\n    // fetch('b64.txt')\n    // .then(response => response.text())\n    // .then(data => {\n    //   this.renderImg(\n    //     data\n    //   );\n    //   // setInterval(() => {\n    //   //   this.renderRandomRGBImg(\n    //   //     this.getRandomRGBImgArray(\n    //   //       this.refs.canvas.width,\n    //   //       this.refs.canvas.height\n    //   //     )\n    //   //   );\n    //   // }, 500);\n    // });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Camera\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: \"640\",\n      height: \"480\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["C:/Users/Miko≈Çaj/OneDrive/Projects/ROV4_GUI/client/src/components/Camera.js"],"names":["React","openSocket","Camera","Component","constructor","props","state","img","renderImg","data","src","setState","componentDidMount","io","on","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;AAEA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE;AADM,KAAb;AAGD,GANkC,CAQnC;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,QAAIC,GAAG,GAAG,4BAA0BD,IAApC;AACA,SAAKE,QAAL,CAAc;AACZJ,MAAAA,GAAG,EAAEG,GADO,CACH;;AADG,KAAd;AAGD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,EAAE,GAAGZ,UAAU,CAAC,uBAAD,CAArB;AACAY,IAAAA,EAAE,CAACC,EAAH,CAAM,OAAN,EAAeL,IAAI,IAAI;AACrB,WAAKD,SAAL,CACEC,IADF;AAGD,KAJD,EAFkB,CAQlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,KAA3B;AAAiC,MAAA,MAAM,EAAC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAtFkC;;AAyFrC,eAAeb,MAAf","sourcesContent":["import React from 'react';\r\nimport openSocket from 'socket.io-client';\r\n\r\nclass Camera extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: null\r\n    }\r\n  }\r\n\r\n  // getRandomRGBValue(min=0, max=255) {\r\n  //   return Math.floor(Math.random() * max) + min;\r\n  // }\r\n\r\n  // getRandomRGBImgArray(width, height) {\r\n  //   let rgbdata = [];\r\n\r\n  //   for(let i = 0; i < width; i++){\r\n  //     let row = [];\r\n  //     for(let j = 0; j < height; j++){\r\n  //       row.push([\r\n  //         this.getRandomRGBValue(0,255),\r\n  //         this.getRandomRGBValue(0,255),\r\n  //         this.getRandomRGBValue(0,255)\r\n  //       ]);\r\n  //     }\r\n  //     rgbdata.push(row);\r\n  //   }\r\n\r\n  //   return rgbdata;\r\n  // }\r\n\r\n  // renderRandomRGBImg(rgbarray) {\r\n  //   // paint rgbadata array on a canvas\r\n  //   const canvas = this.refs.canvas;\r\n  //   let ctx = canvas.getContext('2d');\r\n\r\n  //   for(let i = 0; i < rgbarray.length; i++){\r\n  //     for(let j = 0; j < rgbarray[0].length; j++){\t\r\n  //       ctx.fillStyle = 'rgba('+\r\n  //         rgbarray[i][j][0]+','+\r\n  //         rgbarray[i][j][1]+','+\r\n  //         rgbarray[i][j][2]+', 1)'; \r\n  //       ctx.fillRect(i,j,1,1);\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  renderImg(data) {\r\n    let src = 'data:image/jpg;base64, '+data;\r\n    this.setState({\r\n      img: src // set image state which will render it\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const io = openSocket('http://localhost:5000');\r\n    io.on('frame', data => {\r\n      this.renderImg(\r\n        data\r\n      );\r\n    });\r\n\r\n    // // get rgbdata from server\r\n    // fetch('b64.txt')\r\n    // .then(response => response.text())\r\n    // .then(data => {\r\n    //   this.renderImg(\r\n    //     data\r\n    //   );\r\n    //   // setInterval(() => {\r\n    //   //   this.renderRandomRGBImg(\r\n    //   //     this.getRandomRGBImgArray(\r\n    //   //       this.refs.canvas.width,\r\n    //   //       this.refs.canvas.height\r\n    //   //     )\r\n    //   //   );\r\n    //   // }, 500);\r\n    // });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Camera\">\r\n        {/* <img src={ this.state.img } alt=\"ROV camera output\"/> */}\r\n        <canvas ref=\"canvas\" width=\"640\" height=\"480\"></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}