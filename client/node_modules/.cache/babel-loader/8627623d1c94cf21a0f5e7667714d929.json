{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miko\\u0142aj\\\\OneDrive\\\\Projects\\\\ROV4_GUI\\\\client\\\\src\\\\components\\\\Camera.js\";\nimport React from 'react';\nimport openSocket from 'socket.io-client';\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: null\n    };\n  }\n\n  randomRGBValue() {\n    return Math.floor(Math.random() * 256);\n  }\n\n  randomRGBImageArray(width, height) {\n    let rgbdata = [];\n\n    for (let i = 0; i < width; i++) {\n      let row = [];\n\n      for (let j = 0; j < height; j++) {\n        row.push([this.randomRGBValue(), this.randomRGBValue(), this.randomRGBValue()]);\n      }\n\n      rgbdata.push(row);\n    }\n\n    return rgbdata;\n  }\n\n  renderImg(data) {\n    // convert rgbdata from server, paint it on a canvas and render it on the page\n    // const canvas = this.refs.canvas;\n    // let ctx = canvas.getContext('2d');\n    // for(let i=0; i<rgbdata.length; i++){\n    //   for(let j=0; j<rgbdata[0].length; j++){\t\n    //     ctx.fillStyle = 'rgba('+\n    //       rgbdata[i][j][0]+','+\n    //       rgbdata[i][j][1]+','+\n    //       rgbdata[i][j][2]+', 1)'; \n    //     ctx.fillRect(i,j,1,1);\n    //   }\n    // }\n    let src = 'data:image/png;base64, ' + data;\n    this.setState({\n      img: src // set image state which will render it\n\n    });\n  }\n\n  componentWillMount() {\n    // get rgbdata from server\n    fetch('b64.txt').then(response => response.text()).then(data => {\n      console.log(data);\n      this.renderImg( // this.randomRGBImageArray(200,100)\n      data);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.img,\n      alt: \"ROV camera output\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // const io = openSocket('http://localhost:3000');\n\n\nexport default Camera;","map":{"version":3,"sources":["C:/Users/Miko≈Çaj/OneDrive/Projects/ROV4_GUI/client/src/components/Camera.js"],"names":["React","openSocket","Camera","Component","constructor","props","state","img","randomRGBValue","Math","floor","random","randomRGBImageArray","width","height","rgbdata","i","row","j","push","renderImg","data","src","setState","componentWillMount","fetch","then","response","text","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;AAGA,MAAMC,MAAN,SAAqBF,KAAK,CAACG,SAA3B,CAAqC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE;AADM,KAAb;AAGD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACjC,QAAIC,OAAO,GAAG,EAAd;;AAEA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,KAAf,EAAsBG,CAAC,EAAvB,EAA0B;AACxB,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,MAAf,EAAuBI,CAAC,EAAxB,EAA2B;AACzBD,QAAAA,GAAG,CAACE,IAAJ,CAAS,CACP,KAAKX,cAAL,EADO,EAEP,KAAKA,cAAL,EAFO,EAGP,KAAKA,cAAL,EAHO,CAAT;AAKD;;AACDO,MAAAA,OAAO,CAACI,IAAR,CAAaF,GAAb;AACD;;AAED,WAAOF,OAAP;AACD;;AAEDK,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAIC,GAAG,GAAG,4BAA0BD,IAApC;AAEA,SAAKE,QAAL,CAAc;AACZhB,MAAAA,GAAG,EAAEe,GADO,CACH;;AADG,KAAd;AAGD;;AAEDE,EAAAA,kBAAkB,GAAG;AACnB;AACAC,IAAAA,KAAK,CAAC,SAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEML,IAAI,IAAI;AACZQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACA,WAAKD,SAAL,EACE;AACAC,MAAAA,IAFF;AAID,KARD;AASD;;AAEDU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAG,KAAKzB,KAAL,CAAWC,GAAtB;AAA4B,MAAA,GAAG,EAAC,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAOD;;AAzEkC,C,CA4ErC;;;AAGA,eAAeL,MAAf","sourcesContent":["import React from 'react';\r\nimport openSocket from 'socket.io-client';\r\n\r\n\r\nclass Camera extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: null\r\n    }\r\n  }\r\n\r\n  randomRGBValue() {\r\n    return Math.floor(Math.random() * 256);\r\n  }\r\n\r\n  randomRGBImageArray(width, height) {\r\n    let rgbdata = [];\r\n\r\n    for(let i=0; i<width; i++){\r\n      let row = [];\r\n      for(let j=0; j<height; j++){\r\n        row.push([\r\n          this.randomRGBValue(),\r\n          this.randomRGBValue(),\r\n          this.randomRGBValue()\r\n        ]);\r\n      }\r\n      rgbdata.push(row);\r\n    }\r\n\r\n    return rgbdata;\r\n  }\r\n\r\n  renderImg(data) {\r\n    // convert rgbdata from server, paint it on a canvas and render it on the page\r\n    // const canvas = this.refs.canvas;\r\n    // let ctx = canvas.getContext('2d');\r\n\r\n    // for(let i=0; i<rgbdata.length; i++){\r\n    //   for(let j=0; j<rgbdata[0].length; j++){\t\r\n    //     ctx.fillStyle = 'rgba('+\r\n    //       rgbdata[i][j][0]+','+\r\n    //       rgbdata[i][j][1]+','+\r\n    //       rgbdata[i][j][2]+', 1)'; \r\n    //     ctx.fillRect(i,j,1,1);\r\n    //   }\r\n    // }\r\n\r\n    let src = 'data:image/png;base64, '+data;\r\n\r\n    this.setState({\r\n      img: src // set image state which will render it\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    // get rgbdata from server\r\n    fetch('b64.txt')\r\n    .then(response => response.text())\r\n    .then(data => {\r\n      console.log(data);\r\n      this.renderImg(\r\n        // this.randomRGBImageArray(200,100)\r\n        data\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src={ this.state.img } alt=\"ROV camera output\"/>\r\n        {/* <canvas width=\"200\" height=\"100\"></canvas> */}\r\n        {/* <canvas ref='canvas' width='640' height='480'></canvas> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const io = openSocket('http://localhost:3000');\r\n\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}