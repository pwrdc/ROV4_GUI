{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miko\\u0142aj\\\\OneDrive\\\\Projects\\\\ROV4_GUI\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.sass';\nimport openSocket from 'socket.io-client';\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: null\n    };\n  }\n\n  randomRGBValue() {\n    return Math.floor(Math.random() * 256);\n  }\n\n  randomRGBImageArray(width, height) {\n    let rgbdata = [];\n\n    for (var i = 0; i < width; i++) {\n      for (var j = 0; j < height; j++) {\n        rgbdata.push([this.randomRGBValue(), this.randomRGBValue(), this.randomRGBValue()]);\n      }\n    }\n  }\n\n  renderImg(rgbdata) {\n    // convert rgbdata from server, paint it on a canvas and render it on the page\n    const canvas = this.refs.canvas;\n    let ctx = canvas.getContext('2d');\n\n    for (var i = 0; i < rgbdata.length; i++) {\n      for (var j = 0; j < rgbdata[0].length; j++) {\n        ctx.fillStyle = 'rgba(' + rgbdata[i][j][0] + ',' + rgbdata[i][j][1] + ',' + rgbdata[i][j][2] + ', 1)';\n        ctx.fillRect(j, i, 1, 1);\n      }\n    }\n\n    console.log(canvas);\n    this.setState({\n      img: canvas // set image state which will render it\n\n    });\n  }\n\n  componentWillMount() {\n    // get rgbdata from server\n    fetch('klateczka.txt').then(response => response.text()).then(data => {\n      console.log(data);\n      let x = JSON.parse(data);\n      console.log(x);\n      console.log(data[0]);\n      this.renderImg(data);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: \"200\",\n      height: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n\n} // ========================================\n// const io = openSocket('http://localhost:3000');\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Camera, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Miko≈Çaj/OneDrive/Projects/ROV4_GUI/client/src/index.js"],"names":["React","ReactDOM","openSocket","Camera","Component","constructor","props","state","img","randomRGBValue","Math","floor","random","randomRGBImageArray","width","height","rgbdata","i","j","push","renderImg","canvas","refs","ctx","getContext","length","fillStyle","fillRect","console","log","setState","componentWillMount","fetch","then","response","text","data","x","JSON","parse","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.sass';\r\nimport openSocket from 'socket.io-client';\r\n\r\n\r\nclass Camera extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: null\r\n    }\r\n  }\r\n\r\n  randomRGBValue() {\r\n    return Math.floor(Math.random() * 256);\r\n  }\r\n  randomRGBImageArray(width, height) {\r\n    let rgbdata = [];\r\n    for(var i=0; i< width; i++){\r\n      for(var j=0; j< height; j++){\r\n        rgbdata.push([\r\n          this.randomRGBValue(),\r\n          this.randomRGBValue(),\r\n          this.randomRGBValue()\r\n        ]);\r\n      }\r\n    }\r\n  }\r\n  renderImg(rgbdata) {\r\n    // convert rgbdata from server, paint it on a canvas and render it on the page\r\n    const canvas = this.refs.canvas;\r\n    let ctx = canvas.getContext('2d');\r\n\r\n    for(var i=0; i< rgbdata.length; i++){\r\n      for(var j=0; j< rgbdata[0].length; j++){\t\r\n        ctx.fillStyle = 'rgba('+\r\n          rgbdata[i][j][0]+','+\r\n          rgbdata[i][j][1]+','+\r\n          rgbdata[i][j][2]+', 1)'; \r\n        ctx.fillRect( j, i, 1, 1 );\r\n      }\r\n    }\r\n\r\n    console.log(canvas);\r\n\r\n    this.setState({\r\n      img: canvas // set image state which will render it\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    // get rgbdata from server\r\n    fetch('klateczka.txt')\r\n    .then(response => response.text())\r\n    .then(data => {\r\n      console.log(data);\r\n      let x = JSON.parse(data)\r\n      console.log(x);\r\n      console.log(data[0]);\r\n      this.renderImg(data)\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <img src={ this.state.img } alt=\"ROV camera output\"/> */}\r\n        {/* <canvas width=\"200\" height=\"100\"></canvas> */}\r\n        <canvas ref='canvas' width='200' height='100'></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\n// const io = openSocket('http://localhost:3000');\r\n\r\nReactDOM.render(\r\n  <Camera />,\r\n  document.getElementById('root')\r\n);"]},"metadata":{},"sourceType":"module"}