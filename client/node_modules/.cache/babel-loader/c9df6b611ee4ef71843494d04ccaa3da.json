{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Miko\\u0142aj\\\\OneDrive\\\\Projects\\\\ROV4_GUI\\\\client\\\\src\\\\components\\\\Camera.js\";\nimport React from 'react';\nimport openSocket from 'socket.io-client';\n\nclass Camera extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      img: null\n    };\n  }\n\n  getRandomRGBValue() {\n    return Math.floor(Math.random() * 256);\n  }\n\n  getRandomRGBImgArray(width, height) {\n    let rgbdata = [];\n\n    for (let i = 0; i < width; i++) {\n      let row = [];\n\n      for (let j = 0; j < height; j++) {\n        row.push([this.getRandomRGBValue(), this.getRandomRGBValue(), this.getRandomRGBValue()]);\n      }\n\n      rgbdata.push(row);\n    }\n\n    return rgbdata;\n  }\n\n  renderRandomRGBImg(rgbarray) {\n    // paint rgbadata array on a canvas\n    const canvas = this.refs.canvas;\n    let ctx = canvas.getContext('2d');\n\n    for (let i = 0; i < rgbarray.length; i++) {\n      for (let j = 0; j < rgbarray[0].length; j++) {\n        ctx.fillStyle = 'rgba(' + rgbarray[i][j][0] + ',' + rgbarray[i][j][1] + ',' + rgbarray[i][j][2] + ', 1)';\n        ctx.fillRect(i, j, 1, 1);\n      }\n    }\n  }\n\n  renderImg(data) {\n    let src = 'data:image/jpg;base64, ' + data;\n    this.setState({\n      img: src // set image state which will render it\n\n    });\n  }\n\n  componentDidMount() {\n    // get rgbdata from server\n    fetch('b64.txt').then(response => response.text()).then(data => {\n      console.log(data); // this.renderImg(\n      //   data\n      // );\n\n      setInterval(() => {\n        this.renderRandomRGBImg(this.getRandomRGBImgArray(this.refs.canvas.width, this.refs.canvas.height));\n      }, 10);\n    }); // const io = openSocket('http://localhost:3000');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"Camera\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: \"canvas\",\n      width: \"40\",\n      height: \"30\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["C:/Users/Miko≈Çaj/OneDrive/Projects/ROV4_GUI/client/src/components/Camera.js"],"names":["React","openSocket","Camera","Component","constructor","props","state","img","getRandomRGBValue","Math","floor","random","getRandomRGBImgArray","width","height","rgbdata","i","row","j","push","renderRandomRGBImg","rgbarray","canvas","refs","ctx","getContext","length","fillStyle","fillRect","renderImg","data","src","setState","componentDidMount","fetch","then","response","text","console","log","setInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport openSocket from 'socket.io-client';\r\n\r\nclass Camera extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      img: null\r\n    }\r\n  }\r\n\r\n  getRandomRGBValue() {\r\n    return Math.floor(Math.random() * 256);\r\n  }\r\n\r\n  getRandomRGBImgArray(width, height) {\r\n    let rgbdata = [];\r\n\r\n    for(let i = 0; i < width; i++){\r\n      let row = [];\r\n      for(let j = 0; j < height; j++){\r\n        row.push([\r\n          this.getRandomRGBValue(),\r\n          this.getRandomRGBValue(),\r\n          this.getRandomRGBValue()\r\n        ]);\r\n      }\r\n      rgbdata.push(row);\r\n    }\r\n\r\n    return rgbdata;\r\n  }\r\n\r\n  renderRandomRGBImg(rgbarray) {\r\n    // paint rgbadata array on a canvas\r\n    const canvas = this.refs.canvas;\r\n    let ctx = canvas.getContext('2d');\r\n\r\n    for(let i = 0; i < rgbarray.length; i++){\r\n      for(let j = 0; j < rgbarray[0].length; j++){\t\r\n        ctx.fillStyle = 'rgba('+\r\n          rgbarray[i][j][0]+','+\r\n          rgbarray[i][j][1]+','+\r\n          rgbarray[i][j][2]+', 1)'; \r\n        ctx.fillRect(i,j,1,1);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderImg(data) {\r\n    let src = 'data:image/jpg;base64, '+data;\r\n    this.setState({\r\n      img: src // set image state which will render it\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    // get rgbdata from server\r\n    fetch('b64.txt')\r\n    .then(response => response.text())\r\n    .then(data => {\r\n      console.log(data);\r\n      // this.renderImg(\r\n      //   data\r\n      // );\r\n      setInterval(() => {\r\n        this.renderRandomRGBImg(\r\n          this.getRandomRGBImgArray(\r\n            this.refs.canvas.width,\r\n            this.refs.canvas.height\r\n          )\r\n        );\r\n      }, 10);\r\n    });\r\n\r\n    // const io = openSocket('http://localhost:3000');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"Camera\">\r\n        {/* <img src={ this.state.img } alt=\"ROV camera output\"/> */}\r\n        <canvas ref=\"canvas\" width=\"40\" height=\"30\"></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}